package com.example.crud.dao;

import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.crud.model.Player;

@Repository
public interface PlayerDao extends CrudRepository<Player, Integer>{

	//save , update ,delete getall, get by id

	//Query("select * from Player p where p.team=:team")
	
	public List<Player> findByTeam(String team);
	
	
	@Query("select p from Player p where p.playerName=:playerName and p.team=:team")
	public Player findByNameAndTeam(@Param("playerName") String playerName,@Param("team") String team);


	
}



----------------service 

package com.example.crud.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.crud.dao.PlayerDao;
import com.example.crud.model.Player;

@Service
public interface PlayerService {

	
public Player playerSave(Player player);
public List<Player> getplayers();
public Player getplayerById(int playerId);
public Player updatePlayer(Player player);
public void deletePlayer(int playerId);
public List<Player> findByTeam(String team);

public Player findByNameAndTeam(String playerName,String team);


}


-------------impl 


package com.example.crud.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.crud.dao.PlayerDao;
import com.example.crud.model.Player;

@Service
public class PlayerServiceImpl implements PlayerService{

	@Autowired
	PlayerDao playerDao;
	
	
public Player playerSave(Player player)
{	
	return playerDao.save(player);
}

public List<Player> getplayers()
{	
	return (List<Player>) playerDao.findAll();
}


public Player getplayerById(int playerId)
{	
	return playerDao.findById(playerId).get();
}


public Player updatePlayer(Player player)
{	
	return playerDao.save(player);
}

public void deletePlayer(int playerId)
{	
	
	 playerDao.deleteById(playerId);
}

public List<Player> findByTeam(String team)
{
	return playerDao.findByTeam(team);
}

public Player findByNameAndTeam(String playerName,String team)
{
	
	return playerDao.findByNameAndTeam(playerName, team);
}



}


-----------controller

package com.example.crud.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.crud.model.Player;
import com.example.crud.service.PlayerService;

@RestController
@RequestMapping("players")
public class PlayerController {

	@Autowired
	PlayerService playerService;
	
	@PostMapping
	public ResponseEntity<Player> savePlayer(@RequestBody Player player)
	{	
		Player savedPlayer= playerService.playerSave(player);
		return new ResponseEntity<Player>(savedPlayer,HttpStatus.CREATED);
	}
	
	
	@GetMapping
	public  ResponseEntity<List<Player>> getPlayers()
	{
		
	List<Player> players=  playerService.getplayers();
		return new ResponseEntity<List<Player>>(players,HttpStatus.FOUND);
	
	}
	
	//http://localhost:1234/players/anything
	
	@GetMapping("{playerId}")
	public ResponseEntity<Player> getPlayerById(@PathVariable int playerId)
	{
		Player foundPlayer= playerService.getplayerById(playerId);
	return new ResponseEntity<Player>(foundPlayer,HttpStatus.FOUND);
	}

	
	//http://localhost:1234/players/team/RCB
	@GetMapping("team/{team}")
	public ResponseEntity<List<Player>> getPlayerByTeam(@PathVariable String team)
	{
		List<Player> foundPlayers= playerService.findByTeam(team);
	return new ResponseEntity<List<Player>>(foundPlayers,HttpStatus.FOUND);
	}
	
	//http://localhost:1234/players/search/PLAYERNAME/TEAM
	@GetMapping("search/{playerName}/{team}")
	public  ResponseEntity<Player> findByNameAndTeam(@PathVariable String playerName,@PathVariable String team)
	{
		System.out.println(playerName+" "+team);
		Player foundPlayer= playerService.findByNameAndTeam(playerName, team);
		System.out.println(foundPlayer);
		return new ResponseEntity<Player>(foundPlayer ,HttpStatus.FOUND);
	}

	
	
	
	
	@PutMapping
	public ResponseEntity<Player> updatePlayer(@RequestBody Player player)
	{
		
		Player updatdPlayer= playerService.updatePlayer(player);
		return new ResponseEntity<Player>(updatdPlayer,HttpStatus.OK);
	}
	
	@DeleteMapping("{playerId}")
	public ResponseEntity<String> deletePlayerById(@PathVariable int playerId)
	{
		playerService.deletePlayer(playerId);
		return new  ResponseEntity<String>("player deleted ",HttpStatus.OK);  
	}
	
}
















