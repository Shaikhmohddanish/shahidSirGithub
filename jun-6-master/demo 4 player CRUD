---service

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Player } from './player.model';

@Injectable({
  providedIn: 'root'
})
export class PlayerService {

  constructor(private http:HttpClient) { }


  getplayers()
  {
   return this.http.get<Player[]>('http://localhost:3000/players');
  }

  addplayer(player:Player)
  {
 
    return this.http.post<Player>('http://localhost:3000/players',player);

  }

  getplayer(id:number)
  {
   return this.http.get<Player>(`http://localhost:3000/players/${id}`);
  }


  deleteplayer(id:number)
  {
   return this.http.delete<any>(`http://localhost:3000/players/${id}`);
  }


  updateplayer(id:number,player:Player)
  {
   return this.http.put<Player>(`http://localhost:3000/players/${id}`,player);
  }



}

--------------------------search.html 

    <p>searchplayer works!</p>


    <input type="number" [(ngModel)]="id"> 
    <button (click)="searchPlayer()"> search  </button>

    <button (click)="deletePlayer()"> delete  </button>

    <div *ngIf="show"> 
    Name : <input type="text" [(ngModel)]="player.playerName">
        <br>
    playerId : {{player.id}}
    <br>
    Name : <input type="text" [(ngModel)]="player.team">

    <button (click)="updatePlayer()"> update  </button>

</div>





------------search ts 


import { Component, OnInit } from '@angular/core';
import { Player } from '../player.model';
import { PlayerService } from '../player.service';

@Component({
  selector: 'app-searchplayer',
  templateUrl: './searchplayer.component.html',
  styleUrls: ['./searchplayer.component.css']
})
export class SearchplayerComponent implements OnInit {

  constructor(private playerService:PlayerService) { }

  ngOnInit(): void {

   // this.searchPlayer();

  }

player:Player=new Player();
id:number=0;
show=false;
  searchPlayer()
  {
this.show=true;

    this.playerService.getplayer(this.id).subscribe(
data=>{
  this.player=data;
},
error=>{
alert('cannot find id');
}

    )

  }


  deletePlayer()
  {

    this.playerService.deleteplayer(this.id).subscribe(
data=>{
 alert('player deleted')
},
error=>{
alert('cannot find id');
}

    )

  }



  updatePlayer()
  {

    
    this.playerService.updateplayer(this.id,this.player).subscribe(
      data=>{
       alert('player updated');
       console.log(data);
      },
      error=>{
      alert('cannot find id');
      }
    )
  }


}















