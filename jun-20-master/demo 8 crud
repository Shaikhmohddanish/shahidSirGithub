
package com.myapp.restaurant.model;

import java.util.List;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;

@Entity
public class Restaurant {

	@Id
	private int restId;
	private String restName;

	
	
	@Column(name="user_id")
	private int uid;

	@Type(type="yes_no")
	private boolean isOpen;
	

	@Transient
	private int calcTemp;
	
	
	
	
	public Restaurant(int restId, int uid, boolean isOpen) {
		super();
		this.restId = restId;
		this.uid = uid;
		this.isOpen = isOpen;
	}
	public int getCalcTemp() {
		return calcTemp;
	}
	public void setCalcTemp(int calcTemp) {
		this.calcTemp = calcTemp;
	}
	public boolean isOpen() {
		return isOpen;
	}
	public void setOpen(boolean isOpen) {
		this.isOpen = isOpen;
	}

	
	
	public int getUid() {
		return uid;
	}
	public void setUid(int uid) {
		this.uid = uid;
	}
		public int getRestId() {
		return restId;
	}
	public void setRestId(int restId) {
		this.restId = restId;
	}
	public String getRestName() {
		return restName;
	}
	public void setRestName(String restName) {
		this.restName = restName;
	}
	
	public Restaurant() {
		// TODO Auto-generated constructor stub
	}
	public Restaurant(int restId, String restName, String address) {
		super();
		this.restId = restId;
		this.restName = restName;
	
	}
	@Override
	public String toString() {
		return "Restaurant [restId=" + restId + ", restName=" + restName + ", address="  + "]";
	}
	
	
	
}





---------dao 


package com.myapp.restaurant.dao;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;

import com.myapp.restaurant.model.Restaurant;

public class RestaurantDao {

	
	public Restaurant saveRestaurant(Restaurant  restaurant)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		session.save(restaurant);
		tx.commit();
		return restaurant;
	}
	
	public Restaurant getRestaurantById(int restId)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		Restaurant restaurant= session.get(Restaurant.class,restId);
		tx.commit();
		if(restaurant!=null)
		return restaurant;
		else
			return null;
	}

	
	
	public List<Restaurant> getRestaurants()
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		
	List<Restaurant> restaurants=	session.createQuery("from Restaurant").list();
		tx.commit();
		
		if(restaurants.size()==0 )
			return null;
		else
			return 
					restaurants;
	}
	
	
	public List<Restaurant> getRestaurants(boolean isOpen)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		
	//List<Restaurant> restaurants=	session.createQuery("from Restaurant r where r.isOpen=:isOpen").setParameter("isOpen",isOpen) .list();
		
		Query query= session.createQuery("from Restaurant r where r.isOpen=:isOpen");
		query.setParameter("isOpen",isOpen);
		List<Restaurant> restaurants =query.list();
		
		
		
		tx.commit();
		
		if(restaurants.size()==0 )
			return null;
		else
			return 
					restaurants;
	}



	public List<Restaurant> getRestaurants(int restId)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		
		Criteria criteria=session.createCriteria(Restaurant.class);
	criteria.add(Restrictions.gt("restId", restId));	
	List<Restaurant> restaurants =criteria.list();
		
		
		
		tx.commit();
		
		if(restaurants.size()==0 )
			return null;
		else
			return 
					restaurants;
	}


	public List<Restaurant> getRestaurantsGTE(int restId)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		
		Criteria criteria=session.createCriteria(Restaurant.class);
	criteria.add(Restrictions.ge("restId", restId));	
	List<Restaurant> restaurants =criteria.list();
		
		
		
		tx.commit();
		
		if(restaurants.size()==0 )
			return null;
		else
			return 
					restaurants;
	}

	
	
	public void deleteRestaurant(int  restId)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		session.delete( getRestaurantById(restId));
		tx.commit();

	}

	
	public void updateRestaurant(Restaurant restaurant)
	{
		SessionFactory factory=new Configuration().configure().buildSessionFactory();
		Session session= factory.openSession();
		Transaction tx= session.beginTransaction();
		
		
		Restaurant foundRest=getRestaurantById(restaurant.getRestId());
		
		if(restaurant.getRestName()==null || restaurant.getRestName()=="")
			restaurant.setRestName(foundRest.getRestName());
			
		
		
		session.saveOrUpdate(restaurant);
		
		tx.commit();

	}
	

}

-----service 

package com.myapp.restaurant.service;

import java.util.ArrayList;
import java.util.List;

import com.myapp.restaurant.dao.RestaurantDao;
import com.myapp.restaurant.model.Address;
import com.myapp.restaurant.model.Restaurant;

public class RestaurantService {

	public static void main(String[] args) {

		RestaurantDao dao=new RestaurantDao();
		
//		List<Restaurant> rests= dao.getRestaurants(3);
//		rests.forEach( x->{System.out.println(x);} );
		

		//List<Restaurant> rests= dao.getRestaurantsGTE(3);
		//rests.forEach( x->{System.out.println(x);} );

		//dao.deleteRestaurant(3);
	
		Restaurant restaurant=new Restaurant(2, 500, true);
		
		
		//restaurant.setRestName("Hotel Empire");
		restaurant.setOpen(false);
		
		dao.updateRestaurant(restaurant);
	}
	
}










